#!/usr/bin/php -q
<?
# user running this program must be a member of GPIO group
$pins=array('EE_NCS'=>23,'EE_SCK'=>22,'EE_SI'=>7,'EE_SO'=>24);

function _exec($cmd) {
//	printf("executing: %s\n",$cmd);
	$result=exec($cmd);
//	printf("returning: %s\n",$result);
	return $result;
}

function input_bit($gpio) {
	/* fastest read */
	$val=file_get_contents("/sys/class/gpio/gpio" . $gpio . "/value",FALSE,NULL,0,1);

	return $val;
}

function output_bit($gpio, $value) {
	$value = $value & 1;

	/* fastest write */
	file_put_contents("/sys/class/gpio/gpio" . $gpio . "/value",$value);
}

function bit_test($var, $bit) {
	return (($var & (1<<$bit)) != 0);
}

function spi_read_bytes($pins,$startAddress, $nBytes) {
	printf("# reading %d bytes starting from address %s\n",$nBytes,$startAddress);
	/* select chip */
	printf("# selecting chip\n");
	output_bit($pins['EE_NCS'],0);

	/* send read instruction 0b0000 x011 */
	printf("# sending read instruction\n");
	$byte=0x03;
	for ( $i=0 ; $i<8 ; $i++ ) {
		output_bit($pins['EE_SI'],bit_test($byte,7-$i));
		output_bit($pins['EE_SCK'],1);
		output_bit($pins['EE_SCK'],0);
	}

	/* start address */
	printf("# sending start address\n");
	for ( $i=0 ; $i<8 ; $i++ ) {
		output_bit($pins['EE_SI'],bit_test($startAddress,7-$i));
		output_bit($pins['EE_SCK'],1);
		output_bit($pins['EE_SCK'],0);
	}

	/* read nBytes * 8 bits */
	$data=array();
	printf("# reading %d bytes\n",$nBytes);
	for ( $i=0 ; $i<$nBytes ; $i++ ) {
		$data[$i]=0x00;
		for ( $j=7 ; $j>=0 ; $j-- ) {
			output_bit($pins['EE_SCK'],1);
			$data[$i] |= input_bit($pins['EE_SO'])<<$j;
			output_bit($pins['EE_SCK'],0);

		}
	}

	/* de-select chip */
	output_bit($pins['EE_NCS'],1);

	return $data;
}

function spi_init($pins) {
	foreach ($pins as $key => $value) {
		printf("# Exporting %s (GPIO %d)\n",$key,$value);
		_exec(sprintf("echo %d > /sys/class/gpio/export",$value));
	}

	/* set directions */
	_exec(sprintf("echo out > /sys/class/gpio/gpio%d/direction",$pins['EE_NCS']));
	_exec(sprintf("echo out > /sys/class/gpio/gpio%d/direction",$pins['EE_SCK']));
	_exec(sprintf("echo out > /sys/class/gpio/gpio%d/direction",$pins['EE_SI']));
	_exec(sprintf("echo in > /sys/class/gpio/gpio%d/direction",$pins['EE_SO']));

	/* de-select chip */
	output_bit($pins['EE_NCS'],1);
}

function spi_disconnect($pins) {
	/* de-select chip */
	output_bit($pins['EE_NCS'],1);

	foreach ($pins as $key => $value) {
		printf("# unexporting %s (GPIO %d)\n",$key,$value);
		_exec(sprintf("echo %d > /sys/class/gpio/unexport",$value));
	}
}

spi_init($pins);
$data = spi_read_bytes($pins,0xFA,6);
spi_disconnect($pins);

printf("%02x:%02x:%02x:%02x:%02x:%02x\n",
	$data[0],
	$data[1],
	$data[2],
	$data[3],
	$data[4],
	$data[5]
);
?>
