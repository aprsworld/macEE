#!/usr/bin/php -q
<?
/* GPIO pins that SPI EEPROM is connected to */
$pins=array('EE_NCS'=>23,'EE_SCK'=>22,'EE_SI'=>7,'EE_SO'=>24);

function input_bit($gpio) {
	/* fastest read */
	$val=file_get_contents("/sys/class/gpio/gpio" . $gpio . "/value",FALSE,NULL,0,1);

	return $val;
}

function output_bit($gpio, $value) {
	$value = $value & 1;

	/* fastest write */
	file_put_contents("/sys/class/gpio/gpio" . $gpio . "/value",$value);
}

function bit_test($var, $bit) {
	return (($var & (1<<$bit)) != 0);
}

function spi_read_bytes($pins,$startAddress, $nBytes) {
	/* select chip */
	output_bit($pins['EE_NCS'],0);

	/* send read instruction 0b0000 x011 per datasheet table 2-1 */
	$byte=0x03;
	for ( $i=7 ; $i>=0 ; $i-- ) {
		output_bit($pins['EE_SI'],bit_test($byte,$i));
		output_bit($pins['EE_SCK'],1);
		output_bit($pins['EE_SCK'],0);
	}

	/* start address */
	for ( $i=7 ; $i>=0 ; $i-- ) {
		output_bit($pins['EE_SI'],bit_test($startAddress,$i));
		output_bit($pins['EE_SCK'],1);
		output_bit($pins['EE_SCK'],0);
	}

	/* read nBytes * 8 bits */
	$data=array();
	for ( $i=0 ; $i<$nBytes ; $i++ ) {
		$data[$i]=0x00;
		for ( $j=7 ; $j>=0 ; $j-- ) {
			output_bit($pins['EE_SCK'],1);
			$data[$i] |= input_bit($pins['EE_SO'])<<$j;
			output_bit($pins['EE_SCK'],0);

		}
	}

	/* de-select chip */
	output_bit($pins['EE_NCS'],1);

	return $data;
}

function setup_pin($gpio,$direction) {
	file_put_contents("/sys/class/gpio/export",$gpio);
	file_put_contents("/sys/class/gpio/gpio" . $gpio . "/direction",$direction);
}

function destroy_pin($gpio) {
	file_put_contents("/sys/class/gpio/unexport",$gpio);
}

function spi_init($pins) {
	setup_pin($pins['EE_NCS'],"out");
	setup_pin($pins['EE_SCK'],"out");
	setup_pin($pins['EE_SI'],"out");
	setup_pin($pins['EE_SO'],"in");

	/* de-select chip */
	output_bit($pins['EE_NCS'],1);
}

function spi_disconnect($pins) {
	/* de-select chip */
	output_bit($pins['EE_NCS'],1);

	destroy_pin($pins['EE_NCS']);
	destroy_pin($pins['EE_SCK']);
	destroy_pin($pins['EE_SI']);
	destroy_pin($pins['EE_SO']);
}

spi_init($pins);
$data = spi_read_bytes($pins,0xFA,6);
spi_disconnect($pins);

printf("%02x:%02x:%02x:%02x:%02x:%02x\n",
	$data[0],
	$data[1],
	$data[2],
	$data[3],
	$data[4],
	$data[5]
);

/* return non-zero since our MAC isn't valid */
if ( 0==$data[0] && 0==$data[1] && 0==$data[2] && 0==$data[3] && 0==$data[4] && 0==$data[5] ) {
	exit(1);
}

exit(0);
?>
